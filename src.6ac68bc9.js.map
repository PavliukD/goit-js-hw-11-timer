{"version":3,"sources":["js/timer.js","index.js"],"names":["CountdownTimer","constructor","selector","targetDate","refs","timer","document","querySelector","days","hours","mins","secs","startCounter","pad","value","String","padStart","timerCalc","time","counterValue","Math","floor","timerUpdate","Date","now","innerHTML","setInterval","textContent"],"mappings":";AACmC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAApB,MAAMA,EACjBC,aAAY,SAACC,EAAD,WAAWC,IACdC,KAAAA,KAAO,CACRC,MAAOC,SAASC,iBAAiBL,KACjCM,KAAMF,SAASC,cAAc,uBAC7BE,MAAOH,SAASC,cAAc,wBAC9BG,KAAMJ,SAASC,cAAc,uBAC7BI,KAAML,SAASC,cAAc,wBAG5BK,KAAAA,aAAaT,GAGtBU,IAAIC,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGrCC,UAAUC,GAMFC,IAAAA,EAAe,CAACX,KALP,KAAKK,IAAIO,KAAKC,MAAMH,EAAQ,QAKfT,MAJZ,KAAKI,IAAIO,KAAKC,MAAOH,EAAQ,MAAyB,OAInCR,KAHpB,KAAKG,IAAIO,KAAKC,MAAOH,EAAQ,KAAoB,MAGvBP,KAF1B,KAAKE,IAAIO,KAAKC,MAAOH,EAAQ,IAAc,OAInDI,KAAAA,YAAYH,GAGrBP,aAAaT,GACLA,EAAaoB,KAAKC,MACbpB,KAAAA,KAAKC,MAAMoB,UAAY,QAIhCC,YAAY,KACHT,KAAAA,UAAUd,EAAaoB,KAAKC,SAIzCF,aAAY,KAACd,EAAD,MAAOC,EAAP,KAAcC,EAAd,KAAoBC,IACvBP,KAAAA,KAAKI,KAAKmB,eAAiBnB,IAC3BJ,KAAAA,KAAKK,MAAMkB,eAAiBlB,IAC5BL,KAAAA,KAAKM,KAAKiB,eAAiBjB,IAC3BN,KAAAA,KAAKO,KAAKgB,eAAiBhB,KA3CL,QAAA,QAAA;;ACCnC,aAFA,IAAA,EAAA,EAAA,QAAA,eAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAIX,EAAJ,QAAmB,CACfE,SAAU,WACVC,WAAY,IAAIoB,KAAK","file":"src.6ac68bc9.js","sourceRoot":"../src","sourcesContent":["\nexport default class CountdownTimer{\n    constructor({selector, targetDate}){\n        this.refs = {\n            timer: document.querySelector(`${selector}`),\n            days: document.querySelector('[data-value = days]'),\n            hours: document.querySelector('[data-value = hours]'),\n            mins: document.querySelector('[data-value = mins]'),\n            secs: document.querySelector('[data-value = secs]'),\n        }\n   \n        this.startCounter(targetDate)\n    }\n\n    pad(value) {\n        return String(value).padStart(2, '0')\n      }\n\n    timerCalc(time){\n        const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)))\n        const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)))\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)))\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000))\n        \n        let counterValue = {days, hours, mins, secs}\n\n        this.timerUpdate(counterValue)\n        }\n    \n    startCounter(targetDate){\n        if (targetDate < Date.now()){\n            this.refs.timer.innerHTML = 'Error'\n            return\n        }\n\n        setInterval(() =>{\n            this.timerCalc(targetDate - Date.now())\n        })\n    }\n\n    timerUpdate({days, hours, mins, secs}){\n        this.refs.days.textContent = `${days}`\n        this.refs.hours.textContent = `${hours}`\n        this.refs.mins.textContent = `${mins}`\n        this.refs.secs.textContent = `${secs}`\n    }\n}\n\n","import CountdownTimer from './js/timer'\n\nnew CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('Jul 17, 2022'),\n  });\n\n\n"]}